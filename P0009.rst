===================================================================
P0009r1 : Polymorphic Multidimensional Array Reference
===================================================================

:Author: H\. Carter Edwards
:Contact: hcedwar@sandia.gov
:Author: Christian Trott
:Contact: crtrott@sandia.gov
:Author: Juan Alday
:Contact: juanalday@gmail.com
:Author: Jesse Perla
:Contact: jesse.perla@ubc.ca
:Author: Mauro Bianco
:Contact: mbianco@cscs.ch
:Author: Robin Maffeo
:Contact: Robin.Maffeo@amd.com
:Author: Ben Sander
:Contact: ben.sander@amd.com
:Author: Bryce Lelbach 
:Contact: balelbach@lbl.gov
:Number: P0009
:Version: 01
:Date: 2015-09-23
:URL: https://github.com/kokkos/PolyView/blob/master/P0009.rst
:WG21: Library Evolution Working Group (LEWG)
:WG21: Evolution Working Group (EWG) for array declaration

.. sectnum::

******************************************************************
Rationale for polymorphic multidimensional array reference
******************************************************************

Multidimensional arrays are a foundational data structure
for science and engineering codes, as demonstrated by their
extensive use in FORTRAN for five decades.
A *multidimensional array reference* is a reference to a memory extent
through a **layout** mapping from a multi-index space (domain) to that extent (range).
A array layout mapping may be bijective as in the case of a traditional
multidimensional array, injective as in the case of a subarray, or
surjective to express symmetry.

Traditional layout mappings have been specfied as part of the language.
For example, FORTRAN specifies *column major* layout and
C specifies *row major* layout.
Such a language-imposed specification requires signficant code refactoring
to change an array's layout, and requires significant code complexity to
implement non-traditional layouts such as tiling in modern linear algebra
or structured grid application domains.  Such layout changes are required
to adapt and optimize code for varying computer architectures; for example,
to change a code from *array of structures* to *structure of arrays*.
Furthermore, multiple versions of code must be maintained for each required layout.

A multidimensional array reference abstraction with polymorphic layout is required
to enable changing array layout without extensive code refactoring and
maintenance of functionally redundant code.
Layout polymorphism is a critical capability; however, it is not the only
beneficial form of polymorphism.

The Kokkos library (github.com/kokkos/kokkos) implements
multidimensional array references with polymorphic layout,
and other access properties as well.
Until recently the Kokkos implementation was limited
to C++1998 standard and is incrementally being refactored
to C++2011 standard.

******************************************************************
Extensibility beyond multdimensional array layout
******************************************************************

The polymorphic **array_ref** abstraction and interface has utility
well beyond the multidimensional array layout property.
Other planned and prototyped properties include specification
of which *memory space* within a heterogeneous memory system
the referenced data resides and algorithmic access intent properties.
Examples of access intent properties include
(1)  *read-only random with locality* such that member queries are
performed through GPU texture cache hardware for GPU memory spaces,
(2) *atomic* such that member access operations are overloaded
via proxy objects to atomic operations (see P0019, Atomic View),
(3) *non-temporal* such that member access operations can be overloaded
with non-caching reads and writes, and
(4) *restrict* to guarantee non-aliasing of referenced data within the current context.


******************************************************************
Compare and contrast summary: previous **array_view** proposals
******************************************************************

The essential issue with **array_view** in
N4512 "Multidimensional bounds, offset and array_view, revision 7"
is that it did not fulfill C++'s *zero-overhead abstraction* requirement
(for both dynamic and static extents), and does not provide a
zero-overhead abstraction to different memory layouts which are
essential for library interoperability with a variety of C++ (e.g. Eigen)
and other languages (e.g. Fortran and Matlab's C++ interface).
Were it to be accepted, another library would be necessary to provide
"direct mapping to the hardware" for views of arrays.
Many of the issues are discussed in more detail in N4355, N4300, and N4222.

Unlike N4512, this proposal
  - allows the layout to be more general with different orderings and padding essential for performant member access (*e.g.*, caching, coalescing),
  - enables interoperability with libraries using compile-time extents, and
  - achieves zero-overhead abstraction for *constexpr* extents and strides which provides more opportunities for the compiler to optimize array data member access functions.

******************************************************************
Array Reference
******************************************************************

The proposed **array_ref** has template arguments for the data type of the array
and a parameter pack for polymorphic properties of the reference.

  |  namespace std {
  |  namespace experimental {
  |    template< class DataType , class ... Properties >
  |    struct array_ref ;
  |  }}


The complete proposed specification for **array_ref** is
included at the end of this paper.
We present the specification incrementally to
convey the rational for this specification.

An initial set of properties are proposed.
These properties are defined by class and templated class types
and reside in the **array_property** namespace,
similar to the designated namespace such as the **std::rel_ops** functions,
**std::chrono** classes, or **std::regex_constants** constants.

  | namespace std {
  | namespace experimental {
  | namespace array_property {
  |   // array property classes
  | }}}


******************************************************************
One-Dimensional Array
******************************************************************

A reference to a one-dimension array is anticipated to subsume the functionality
of a pointer to memory extent combined with an array length.
For example, a one-dimensional array is passed to a function as follows.

.. code-block:: c++

  void foo( int array[] , size_t N ); // Traditional API
  void foo( const int array[] , size_t N ); // Traditional API

  void foo( array_ref< int[] > array ); // Reference API
  void foo( array_ref< const int[] > array ); // Reference API

  void bar()
  {
    enum { L = ... };
    int buffer[ L ];
    array_ref<int[]> array( buffer , L );

    assert( L == array.size() );
    assert( & array[0] == buffer );

    foo( array );
  }

..

The *const-ness* of an **array_ref** is analogous to the *const-ness*
of a pointer.
A **const array_ref<D>** is similar to a const-pointer in that the **array_ref**
may not be modifid but the referenced extent of memory may be modified.
A **array_ref<const D>** is similar to a pointer-to-const in that the
referenced extent of memory may not be modified.

***********************************************************************
Traditional Multidimensional Array with Explicit Dimensions
***********************************************************************

A traditional multidimensional array with explicit dimensions
(for example, an array of 3x3 tensors) is passed to a function as follows.

.. code-block:: c++

  void foo( double array[][3][3] , size_t N0 ); // Traditional API
  void foo( array_ref< double[][3][3] > array ); // Reference API

  void bar()
  {
    enum { L = ... };
    int buffer[ L * 3 * 3 ];
    array_ref< double[][3][3] > array( buffer , L );

    assert( 3 == array.rank() );
    assert( L == array.extent(0) );
    assert( 3 == array.extent(1) );
    assert( 3 == array.extent(2) );
    assert( array.size() == array.extent(0) * array.extent(1) * array.extent(2) );
    assert( & array(0,0,0) == buffer );

    foo( array );
  }

..

********************************************************************************
Multidimensional Array with Multiple Implicit Dimensions
********************************************************************************

The current multidimensional array type declaration in **n4567 8.3.4.p3**
restricts array declarations such that only the leading dimension
may be implicit.
Multidimensional arrays with multiple implicit dimensions as well as
explicit dimensions are supported with the **dimension** property.
The dimension property uses the "magic value" zero to denote an
implicit dimension.
The "magic value" of zero is chosen for consistency with **std::extent**.

.. code-block:: c++

  array_ref< int[][3] > x ;

  assert( x.extent(0) == 0 );
  assert( x.extent(1) == 3 );

  assert( extent< int[][3] , 0 >::value == 0 );
  assert( extent< int[][3] , 1 >::value == 0 );

  array_ref< int , array_property::dimension<0,0,3> > y ;
  assert( y.extent(0) == 0 );
  assert( y.extent(1) == 0 );
  assert( y.extent(2) == 3 );

  array_ref< int , array_proprety::dimension<0,0,3> > z(ptr,N0,N1);
  assert( z.extent(0) == N0 );
  assert( z.extent(1) == N1 );
  assert( z.extent(2) == 3 );

..


Preferred Syntax
------------------------------------------------------------------------------

We prefer the following concise and intuitive syntax for arrays
with multiple implict dimensions.

.. code-block:: c++

  array_ref< int[][][3] > y ; // concise intuitive syntax

..

However, this syntax requires a
`relaxation of the current multidimensional array type declaration`_
in **n4567 8.3.4.p3**.
Furthermore, this concise and intuitive syntax eliminates the need
for ``array_property::dimension<...>`` and the associated "magic value"
of zero to denote an implicit dimension.

******************************************************************
Array Reference Properties: Layout Polymorphism
******************************************************************

The **array_ref::operator()** maps the input multi-index from the array's
cartesian product multi-index *domain* space to a member in the array's *range* space.
This is the **layout** mapping for the referenced array.
For natively declared multidimensional arrays the layout mapping
is defined to conform to treating the multidimensional array as
an *array of arrays of arrays ...*; i.e., the size and span are
equal and the strides increase from right-to-left.
In the FORTRAN language defines layout mapping with strides
increasing from left-to-right.
These *native* layout mappings are only two of many possible layouts.
For example, the *basic linear algebra subprograms (BLAS)* standard
defines dense matrix layout mapping with padding of the leading dimension,
requiring both dimensions and **LDA** parameters to fully declare a matrix layout.


A property template parameter specifies a layout mapping.
If this property is omitted the layout mapping of the referenced 
conforms to a corresponding natively declared multidimensional array
as if implicit dimensions were declared explicitly.
The default layout is *regular* - the distance is constant between
entries when a single index of the multi-index is incremented.
This distance is the *stride* of the corresponding dimension.
The default layout mapping is bijective and the stride increases
monotonically from the right most to the left most dimension.

.. code-block:: c++

  // The default layout mapping of a rank-four multidimensional
  // array is as if implemented as follows.

  template< size_t N0 , size_t N1 , size_t N2 , size_t N3 >
  size_t native_mapping( size_t i0 , size_t i1 , size_t i2 , size_t i3 )
    {
      return i0 * N3 * N2 * N1 // stride == N3 * N2 * N1
           + i1 * N3 * N2      // stride == N3 * N2
           + i2 * N3           // stride == N3
           + i3 ;              // stride == 1
    } 

..

An initial set of layout properties are
**layout_right**, **layout_left**, and **layout_stride**.

  |  namespace std {
  |  namespace experimental {
  |  namespace array_property {
  |    struct layout_right ;
  |    struct layout_left ;
  |    struct layout_stride ;
  |  }}}


.. code-block:: c++

  typedef array_ref< int , array_property::dimension<0,0,3> > array_native ;

  typedef array_ref< int , array_property::dimension<0,0,3>
                         , array_property::layout_right > array_right ;

  typedef array_ref< int , array_property::dimension<0,0,3>
                         , array_property::layout_left >  array_left ;

  assert( std::is_same< typename array_native::layout , void >::value );
  assert( std::is_same< typename array_right ::layout , array_property::layout_right >::value );
  assert( std::is_same< typename array_left  ::layout , array_property::layout_left >::value );

  assert( array_native::is_regular::value );
  assert( array_right ::is_regular::value );
  assert( array_left  ::is_regular::value );

..

A **void** (*a.k.a.*, default or native) mapping is regular and bijective with
strides increasing from increasing from right most to left most dimension.
A **layout_right** mapping is regular and injective (may have padding) with
strides increasing from right most to left most dimension.
A **layout_left** mapping is regular and injective (may have padding) with
strides increasing from left most to right most dimension.
A **layout_stride** mapping is regular; however, it may
not be injective or surjective.

.. code-block:: c++

  // The right and left layout mapping of a rank-four
  // multidimensional array could be is as if implemented
  // as follows.  Note that padding is allowed but not required.

  template< size_t N0 , size_t N1 , size_t N2 , size_t N4 >
  size_t right_mapping( size_t i0 , size_t i1 , size_t i2 , size_t i3 )
    {
      const size_t S3 = // stride of dimension 3
      const size_t P3 = // padding of dimension 3
      const size_t P2 = // padding of dimension 2
      const size_t P1 = // padding of dimension 1
      return i0 * S3 * ( P3 + N3 ) * ( P2 + N2 ) * ( P1 + N1 )
           + i1 * S3 * ( P3 + N3 ) * ( P2 + N2 )
           + i2 * S3 * ( P3 + N3 )
           + i3 * S3 ;
    }

  template< size_t N0 , size_t N1 , size_t N2 , size_t N4 >
  size_t left_mapping( size_t i0 , size_t i1 , size_t i2 , size_t i3 )
    {
      const size_t S0 = // stride of dimension 0
      const size_t P0 = // padding of dimension 0
      const size_t P1 = // padding of dimension 1
      const size_t P2 = // padding of dimension 2
      return i0 * S0
           + i1 * S0 * ( P0 + N0 )
           + i2 * S0 * ( P0 + N0 ) * ( P1 + N1 )
           + i3 * S0 * ( P0 + N0 ) * ( P1 + N1 ) * ( P2 + N2 );
    }

..

******************************************************************
Array Reference Properties: Extensible Layout Polymorphism
******************************************************************

The **array_ref** is intended to be extensible such that a user may supply
a customized layout mapping.
A user supplied customized layout mapping will be required to conform
to a specified interface; *a.k.a.*, a C++ Concept.
Details of this extension point will be included in a subsequent
proposal.


An important customized layout mapping is hierarchical tiling.
This kind of layout mapping is used in dense linear algebra matrices and
computations on Cartesian grids to improve the spatial locality
of array entries.
These mappings are bijective but are not regular.
Computations on such multidimensional arrays typically iterate
through tiles as *subarray* of the array.

.. code-block:: c++

  template< size_t N0 , size_t N1 , size_t N2 >
  size_t tiling_left_mapping( size_t i0 , size_t i1 , size_t i2 )
  {
    static constexpr size_t T = // cube tile size
    constexpr size_t T0 = ( N0 + T - 1 ) / T ; // tiles in dimension 0
    constexpr size_t T1 = ( N1 + T - 1 ) / T ; // tiles in dimension 1
    constexpr size_t T2 = ( N2 + T - 1 ) / T ; // tiles in dimension 2

    // offset within tile + offset to tile
    return ( i0 % T ) + T * ( i1 % T ) + T * T * ( i2 % T )
         + T * T * T * ( ( i0 / T ) + T0 * ( ( i1 / T ) + T1 * ( i2 / T ) ) );
  }

..

Note that a tiled layout mapping is irregular and if padding is 
required to align with tile boundarries then the span will exceed the size.
A customized layout mapping will have slightly different requirements
depending on whether the layout is regular or irregular.

******************************************************************
Array Reference Properties: Flexibility and Extensibility
******************************************************************

One or more array properties of **void** are acceptable and have no effect.
This allows user code to define a template argument list of potential
array properties and then enabling/disabling a particular property
by conditionally setting it to **void**.  For example:

.. code-block:: c++

  typedef typename std::conditional< AllowPadding , array_property::layout_right , void >::type  layout ;

  // If AllowPadding then use layout_right else use native layout
  typedef array< int , array_property::dimension<0,0,3> , layout > MyType ;

..

******************************************************************
Specification with Simple Array Reference Properties
******************************************************************

Simple array properties include the array layout and if necessary 
a **array_property::dimension** type for arrays with multiple implicit dimensions.
Array reference properties are provided through a variadic template to 
support extensibility of the array reference.
Possible additional properties include array bounds checking,
atomic access to members, memory space within a heterogeneous
memory architecture, and user access pattern hints.

  |  namespace std {
  |  namespace experimental {
  |
  |  template< class DataType , class ... Properties >
  |  struct array_ref {
  |    //--------------------
  |    // Types:
  |
  |    // Types are implementation and Properties dependent.
  |    // The following type implementation are normative 
  |    // with respect to empty Properties.
  |
  |    using value_type = typename std::remove_all_extents< DataType >::type ;
  |    using reference  = value_type & ; // Typical type, but implementation defined
  |    using pointer    = value_type * ; // Typical type, but implementation defined
  |
  |    //--------------------
  |    // Domain index space properties:
  |
  |    static constexpr unsigned rank() const ;
  |
  |    template< typename IntegralType >
  |    constexpr size_t extent( IntegralType ) const ;
  |
  |    // Cardinality of index space; i.e., product of extents
  |    constexpr size_t size() const ;
  |
  |    //--------------------
  |    // Layout mapping properties:
  |
  |    using layout     = *array layout type* ;
  |    using is_regular = std::integral_constant<bool, *B* > ;
  |
  |    // If the layout mapping is regular then return the
  |    // distance between members when index \# is increased by one.
  |    template< typename IntegralType >
  |    constexpr size_t stride( IntegralType ) const ;
  |
  |    // Span covering the members
  |    constexpr size_t span() const ;
  |
  |    // Span of an array with regular layout if it
  |    // is constructed with the given implicit dimensions.
  |    template< class ... IntegralArgs >
  |    static constexpr
  |      size_t span( IntegralArgs ... implicit_dimensions );
  |
  |    // Pointer to member memory
  |    constexpr pointer data() const ;
  |
  |    //--------------------
  |    // Member access
  |
  |    template< class ... IntegralArgs >
  |    reference operator()( IntegralArgs ... indices ) const noexcept ;
  |
  |    template< typename IntegralType >
  |    reference operator[]( IntegralType ) const noexcept ;
  |
  |    //--------------------
  |    // Construct/move/copy/destroy:
  |
  |    ~array_ref();
  |    constexpr array_ref();
  |    constexpr array_ref( array_ref && );
  |    constexpr array_ref( const array_ref & );
  |    array_ref & operator = ( array_ref && );
  |    array_ref & operator = ( const array_ref & );
  |
  |    template< class ... IntegralArgs >
  |    constexpr array_ref( pointer , IntegralArgs ... implicit_dimensions );
  |
  |    template< class UType , class ... UProperties >
  |    constexpr array_ref( const array_ref< UType , UProperties ... > & );
  |
  |    template< class UType , class ... UProperties >
  |    array_ref & operator = ( const array_ref< UType , UProperties ... > & );
  |  };
  |
  |  }}
  |
  |  namespace std {
  |  namespace experimental {
  |  namespace array_property {
  |
  |  struct layout_right ;
  |  struct layout_left ;
  |  struct layout_stride ;
  |  template< unsigned ... > layout_order ;
  |
  |  template< class T >
  |  struct is_layout ;
  |
  |  template< class T >
  |  constexpr bool is_layout_v = is_layout<T>::value ;
  |
  |  constexpr unsigned maximum_rank = /\* >= 10 \*/ ;
  |
  |  // Specify mix of explicit and implict dimensions
  |  template< size_t ... >
  |  struct dimension ;
  |
  |  }}}

**Properties**

An array_ref is given properties
(such as ``layout_left``, ``layout_right``, and ``layout_stride``)
through the ``Properties`` template parameter pack.

  Effects: A ``void`` member in a ``Properties`` pack is ignored.


**Layout Properties**

  Requires:  At most one member of the ``Properties`` pack
  is a layout property.

  Requires:  is_layout_v< layout_right > == true,
  is_layout_v< layout_left > == true,
  is_layout_v< layout_stride > == true, and
  is_layout_v< layout_order<...> > == true.

  Effects: A layout property specifies the mapping from a
  multi-index given to the member access operator
  to a member reference.

  Effects: Given ``layout_right`` the stride between
  members increased from right-to-left indices.

  Effects: Given ``layout_left`` the stride between
  members increased from left-to-right indices.

  Effects: Given ``layout_stride`` the stride between
  members is arbitrary.


**Dimension Specification**

The dimension specification of an array_ref may be given
through the ``DataType`` template argument or through one of the
``Properties`` template arguments. For example, the dimension
specification for an array_ref with leading implicit dimension
and a second explicit dimension is specified by either of the
following declarations.

.. code-block:: c++

  array_ref< T [][3] >
  array_ref< T , array_property::dimension<0,3> >

..

  Remark: When a dimension specification is part of the ``DataType``
  the specification is limited by the valid
  *multidimensional array type* declaration syntax (n4567 8.3.4.p3).
  If a
  `relaxation of the current multidimensional array type declaration`_
  were made the ``array_property::dimension<...>`` is unecessary and
  eliminated from this proposal.

  Requires: If ``std::extent<DataType>::value == 0`` then at most
  one ``Properties`` template argument may be
  ``array_property::dimension<...>``.

  Effects: When the dimension specification is given 
  as part of the ``DataType`` then
  an explicit dimension is specified by each ``[N]``,
  an implicit dimension is specified by each ``[]``,
  ``rank() == std::rank<DataType>::value``, and
  ``extent(i) == std::extent<DataType,i>::value``
  for ``i < rank()`` and default constructed array_ref.

  Effects: When the dimension specification is given via
  ``view_property::dimension<N0,N1,...>`` then
  ``0 <= Nj`` for all j,
  an explicit dimensions is specified by ``0 < Nj``
  an implicit dimensions is specified by ``0 == Nj``
  ``rank() ==`` number of arguments, and
  ``extent(j) == Nj`` for ``j < rank()`` and
  default constructed array_ref.

  Requires: ``10 <= maximum_rank``

  Effect: An implementation supports array references up to maximum_rank.

  Remark: An array_ref implementation may use rank-specific optimizations.
  As such an indefinite maximum rank may be impractical.  An implementation
  must support at least this rank.


**using value_type = typename std::remove_all_extents< DataType >::type ;**

**using reference =**

  The type returned by the member access operator.
  Typically this will be ``value_type &``.
  [Note: The reference type may be a proxy depending upon the ``Properties``.
  For example, if a property indicates that all member references
  are to be atomic then the reference type would be a
  proxy conforming to *atomic-view-concept* introduced in paper P0019.
  - end note]

**using pointer =**

  The input type to a wrapping constructor.

**static constexpr unsigned rank() const**

  Returns: The rank of the referenced array.

**template< typename IntegralType > constexpr size_t extent( const IntegralType & r ) const**

  Requires: std::is_integral<IntegralType>::value

  Returns: When ``r < rank()`` the exent of dimension, otherwise 1.
  A default constructed view will have extent(r) == 0
  for all implicit dimensions.
  The return value of an explicit dimension queried with a
  literal input value must be "constexpr" observable.

**constexpr size_t size() const**

  Returns: The product of the extents.

**using layout =**

  The layout type property that defaults to ``void``.

**using is_regular = std::integral_constant<bool,** *B* **>**

  Denoting by ``is_regular::value`` if the layout mapping is regular;
  *i.e.*, if there is a uniform stride between members when
  incrementing a particular dereferencing index and holding all
  other indices fixed.

**template< typename IntegralType > constexpr size_t stride( const IntegralType & r ) const**

  Requires: std::is_integral<IntegralType>::value

  Requires: is_regular::value

  Returns: When is_regular::value and ``0 <= r < rank()``
  the distance between members when index ``r`` is incremented by one,
  otherwise 0.

**constexpr size_t span() const**

  Returns:  A distance that is at least
  maximum distance between any two members of the array plus one.
  All member of the array reside in the span ``[ data() .. data() + span() )``.

  Remark: For a one-to-one layout mapping the span will equal the size.

**template< class ... IntegralArgs > static constexpr size_t span( IntegralArgs ... implicit_dimensions )**

  Requires: All arguments are integral types and non-negative values.

  Returns:  The span of the array reference if it were constructed with the implicit dimensions.


**constexpr pointer data() const**

  Returns: Pointer to the member with the minimum location.

  Requires: All members are in the range ``[ data() .. data() + span() )``.

**template< class ... IntegralArgs > reference operator()( IntegralArgs ... indices ) const nothrow**

  Requires: All arguments are integral types and non-negative values.

  Requires: ``rank() <= sizeof...(IntegralArgs)``

  Requires: The ith argument *indices[i]** is in bounds;
  *indices[i]* ``< extent(i)``.
  [Note: Index arguments in excess of ``rank()`` must be zero. -end note]

  Returns: A reference to the member referenced by the indices argument.

  Remark: An implementation may have rank-specific overloads to better
  enable optimization of the member access operator.

.. code-block:: c++

  template< class ... IntegralArgs >
  typename std::enable_if<( 0 <= sizeof...(IntegralArgs) && 0 == rank() )
                         , reference >::type
  operator()( IntegralArgs ... indices ) const nothrow ;

  template< typename iType0 , class ... IntegralArgs >
  typename std::enable_if<( 0 <= sizeof...(IntegralArgs) && 1 == rank() )
                         , reference >::type
  operator()( iType0 i0 , IntegralArgs ... indices ) const nothrow ;

  template< typename iType0 , typename iType1 , class ... IntegralArgs >
  typename std::enable_if<( 0 <= sizeof...(IntegralArgs) && 2 == rank() )
                         , reference >::type
  operator()( iType0 i0 , iType1 i1 , IntegralArgs ... indices ) const nothrow ;

..

**template< typename IntegralType > reference operator[]( const IntegralType & i ) const nothrow**

  | Requires: rank() == 1
  | Requires: is_integral<IntegralType>::value
  | Requires: 0 <= i < extent(0)

  Returns: Reference to member denoted by index ``i``.

  Remark:  Provides compatibility with traditional rank-one array member reference.

  Remark:  It is recommended that the rank and type requirements be enforced
  by conditionally enabling the operator.

.. code-block:: c++

  template< typename IntegralType >
  typename std::enable_if< std::is_integral<IntegralType>::value && 1 == rank() , reference >::type
  operator[]( const IntegralType & i ) const nothrow ;

..

**constexpr array_ref()**

  Effect: Construct a *null* array_ref with extent(i) == 0
  for all implicit dimensions and data() == nullptr.

**constexpr array_ref( const array_ref & rhs )**

  Effect: Construct a array_ref of the same array referenced by ``rhs``.

  Remark: There may be other *property* dependent effects.

**array_ref & operator = ( const array_ref & rhs )**

  Effect: Assigns ``this`` to array_ref the same array referenced  by ``rhs``.

  Remark: There may be other *property* dependent effects.

**constexpr array_ref( array_ref && rhs )**

  Effect: Construct a array_ref of the array referenced by ``rhs`` and then ``rhs`` is *null* array_ref.

  Remark: There may be other *property* dependent effects.

**array_ref & operator = ( array_ref && rhs )**

  Effect: Assigns ``this`` to array_ref the array referenced by ``rhs`` then assigns ``rhs`` to be a *null* array_ref.

  Remark: There may be other *property* dependent effects.

**~array_ref()**

  Effect: Assigns ``this`` to be a *null* array_ref.

  Remark: There may be other *property* dependent effects.

**template< class ... IntegralArgs > constexpr array_ref( pointer ptr , IntegralArgs ... implicit_dimensions )**

  Requires: The input ``ptr`` references memory ``[ ptr .. ptr + S )``
  where S = ``array_ref::span(args...)``.

  Effects: The *wrapping constructor* constructs a multidimensional array
  reference of the given member memory
  such that all data members are in the span ``[ ptr .. ptr + span() )``.


**template< class UType , class ... UProperties > constexpr array_ref( const array_ref< UType , UProperties ... > & rhs )**

  Requires: This array_ref type is assignable to the ``rhs`` array_ref type.
  Assignability includes compatibility of the value type, dimensions, and properties.

  Effect: Constructs a array_ref of the array referenced by ``rhs``.

.. code-block:: c++

  array_ref< int[][3] >      x(ptr,N0);
  array_ref< const int , array_properties::dimension<0,0> > y( x ); // OK: compatible const from non-const and implicit from explicit dimension
  array_ref< int , array_properties::dimension<0,0> >       z( y ); // Error: cannot assign non-const from const

..


**template< class UType , class ... UProperties > array_ref & operator = ( const array_ref< UType , UProperties ... > & rhs )**

  Requires: This array_ref type is assignable to the ``rhs`` array_ref type.

  Effect: Assigns ``this`` to array_ref the array array_ref by ``rhs``.

******************************************************************
Assignability of Array References of Non-identical Types
******************************************************************

It is essential that array_ref of non-identical, compatible types be assignable.
For example:

.. code-block:: c++

  array_ref< int[][3] > x( ptr , N0 );
  array_ref< const int , array_property::dimension<0,0> > y( x ); // valid assignment

..

The 'std::is_assignable' meta-function must be partial specialized to
implement the array_ref assignability rules regarding value type, dimensions, and properties.

.. code-block:: c++

  template< class Utype , class ... Uprop
          , class Vtype , class ... Vprop >
  struct is_assignable< array_ref< Utype , Uprop ... >
                      , array_ref< Vtype , Vprop ... > >
    : public integral_const< bool ,
        is_assignable< typename array_ref< Utype , Uprop ... >::pointer
                     , typename array_ref< Vtype , Vprop ... >::pointer >::value
        &&
        ( array_ref< Utype , Uprop ... >::rank() == array_ref< Vtype , Vprop ... >::rank() )
        &&
        (
          // Extent is either equal or impplicit.
          extent<Utype,#>::value == extent<Vtype,#>::value ||
          extent<Utype,#>::value == 0
        )
        &&
        // other possible conditions
        > {}
    
..

Assignability extends beyond the **cv** qualification of the array_ref's data.  
For example,
1. implicitly dimensioned array_ref are assignable from equal rank explicitly dimensioned array_ref,
2. strided layout array_ref with implicit dimensions are assignable from equal rank array_ref with regular layout, or
3. a array_ref with an access intent property, such as *random* or *restrict* may be assigned from a array_ref without such a property.


******************************************************************
Subarray Reference
******************************************************************

The capability to **easily** extract subarrays of an array,
or subarrays of subarrays, is essential for usability.
Non-trivial subarrays of regular arrays will often have **layout_stride**.

.. code-block:: c++

  using U = array_ref< int , view_properties::dimension<0,0,0> > ;

  U x(buffer,N0,N1,N2);

  // Using std::pair<int,int> for an integral range
  auto y = subarray( x , std::pair<int,int>(1,N0-1) , std::pair<int,int>(1,N1-1) , 1 );

  assert( y.rank() == 2 );
  assert( y.extent(0) == N0 - 2 );
  assert( y.extent(0) == N1 - 2 );
  assert( & y(0,0) == & x(1,1,1) );

  // Using initializer_list of size 2 as an integral range
  auto z = subarray( x , 1 , {1,N1-1} , 1 );

  assert( z.rank() == 1 );
  assert( & z(0) == & x(1,1,1) );

  // Conveniently extracting subview for all of a extent
  // without having to explicitly extract the dimensions.
  auto x = subarray( x , view_property::all , 1 , 1 );

..

Subview types are generated with a meta-function.

  | namespace std {
  | namespace experimental {
  | namespace array_property {
  |
  | template< typename ArrayRefType , class ... Indices_And_Ranges >
  | struct subarray_type ;
  |
  | struct all_type {};
  | constexpr all_type all = all_type();
  |
  | }}}
  |
  | namespace std {
  | namespace experimental {
  |
  | template< typename ArrayRefType , class ... Indices_And_Ranges >
  | using subarray_t = typename array_property::subarray_type< ArrayRefType , Indices_And_Ranges >::type ;
  |
  | template< typename DataType , class ... Parameters , class ... Indices_And_Ranges >
  | subarray_t< array_ref< DataType, Parameters ... > , Indices_And_Ranges ... >
  | subarray( const array_ref< DataType, Parameters ... > & , Indices_And_Ranges ... );
  |
  | template< typename T >
  | struct is_integral_range ;
  |
  | }}

**template< typename T > struct is_integral_range : public integral_constant<bool,**\ *F*\ **>**

  Returns: Meta function indicating whether T is an integral range.
  

**template< typename ArrayRefType , class ... Indices_And_Ranges > struct subarray_type ;**

  | Requires:  ArrayRefType::rank() == sizeof...(Indices_And_Ranges)
  | Requires:  Each parameter in Indices_And_Ranges is either is_integral<T> or is_integral_range<T>.

  Returns: The array_ref type of the subarray from the input array_ref and parameter pack of indices and integral ranges.
  The rank of the subarray is equal to the number of integral ranges in the parameter pack.
  When a dimension of the source **ArrayRefType** is explicit and the corresponding range argument is **all** then the dimension of the resulting array_ref type is explicit and equal to the source dimension


******************************************************************
Limited iterator interface
******************************************************************

A **array_ref** may have a non-isomorphic mapping between its
multi-index space (domain) and span of member memory (range).
For example, a subarray or dimension padded array will be
non-isomorphic.
An iterator for the members of a non-isomorphic view must be
non-trivial in order to skip over non-member spans of memory.
Thus a general iterator implementation would necessarily
be non-trivial both in state and algorithm.
As such we provide a very limited iterator interface
conforming to **24.6.5 range access** for a rank-one array with
isomorphic layout (*e.g.*, default, **layout_left**, **layout_right**)
and no incompatible access intent properties
(*e.g.*, the **reference** type is truly a reference and not a proxy).
For example, a simple **array_ref<T[]>** will have **begin** and **end** overloads.

  | namespace std {
  |
  | template< class T , class ...P >
  | typename std::enable_if< *(rank one and isomorphic layout and no incompatible access intent properties)* , typename array_ref<T,P...>::pointer >::type
  | begin( const std::experimental::view<T,P...> & v )
  | { return v.data(); }
  |
  | template< class T , class ...P >
  | typename std::enable_if< *(rank one and isomorphic layout and no incompatible access intent properties)* , typename array_ref<T,P...>::pointer >::type
  | end( const std::experimental::array_ref<T,P...> & v )
  | { return v.data() + v.size(); }
  |
  | }

Note that in the more general case of an isomorphic array_ref
of any rank a pointer (iterator) range for view member data can be queried.

.. code-block:: c++

  template< typename T , class ... P >
  void foo( array_ref<T,P...> a )
  {
    if ( std::is_reference< typename array_ref<T,P...>::reference >::value && a.size() == a.span() ) {
      // Iteration via pointer type is valid and performant
      typename array_ref<T,P...>::pointer
        begin = a.data() ,
        end   = a.data() + a.span() ;
    }
  }

..


******************************************************************
Array Reference Property : Member Access Array Bounds Checking
******************************************************************

  |  namespace std {
  |  namespace experimental {
  |  namespace array_property {
  |  struct bounds_checking ;
  |  }}}


Array bounds checking is an invaluable tool for debugging user code.
This functionality traditionally requires global injection through
special compiler support.
In large, long running code global array bounds checking introduces
a signficant overhead that impedes the debugging process.
A member access array bounds checking array property allows
the selective injection of array bounds checking and removes
the need for special compiler support.

.. code-block:: c++

  // User enables array bounds checking for selected array_ref.

  using x_property = typename std::conditional< ENABLE_ARRAY_BOUNDS_CHECKING , array_property::bounds_checking , void >::type ;

  array_ref< int , array_property::dimension<0,0,3>] , x_property > x(ptr,N0,N1);

..

Adding **bounds_checking** to the properties of a array has the
effect of introducing an array bounds check to each member access operation.
If the requirement ``0 <= i# < extent_#()`` fails an error message is generated
and the member access operator aborts as it is **nothrow**.


******************************************************************************
Preferred Syntax for Multidimensional Array with Multiple Implicit Dimensions
******************************************************************************

..  _`relaxation of the current multidimensional array type declaration`:

One goal of the array_ref interface is to preserve syntax
between array_ref and arrays with explicit and implicitly declared dimensions.
In the following example foo1 and foo2 accept rank 3 arrays of integers
with prescribed explicit / implicit dimensions and fooT accepts a rank 3
array of integers with unprescribed dimensions.

.. code-block:: c++

  void foo1( array_ref< int[ ][3][3] > array ); // Two explicit dimensions
  void foo2( array_ref< int[ ][ ][ ] > array ); // All implicit dimensions

  // Accept a array_ref of a rank three array with value type int
  // and dimensions are explicit or implicit.
  template< class T , class ... P >
  typename std::enable_if< array_ref<T,P...>::rank() == 3 >::type
  foo( array_ref<T,P...> array ) { ... }

  void bar()
  {
    enum { L = ... };
    int buffer[ L * 3 * 3 ];
    array_ref< int[][][] > array( buffer , L , 3 , 3 );

    assert( 3 == array.rank() );
    assert( L == array.extent(0) );
    assert( 3 == array.extent(1) );
    assert( 3 == array.extent(2) );
    assert( array.size() == array.extent(0) * array.extent(1) * array.extent(2) );
    assert( & array(0,0,0) == buffer );

    foo( array );
  }

..


A relaxed multidimensional array type declaration
------------------------------------------------------------------------------

The current array type declarator constraints are defined in in **n4567 8.3.4.p3** as follows.

  *When several “array of” specifications are adjacent,
  a multidimensional array type is created;
  only the first of the constant expressions that
  specify the bounds of the arrays may be omitted.
  In addition to declarations in which an incomplete
  object type is allowed, an array bound may be omitted
  in some cases in the declaration of a function parameter (8.3.5).
  An array bound may also be omitted when the declarator is
  followed by an initializer (8.5).
  In this case the bound is calculated from the
  number of initial elements (say, N) supplied (8.5.1),
  and the type of the identifier of D is “array of N T”.
  Furthermore, if there is a preceding declaration
  of the entity in the same scope in which the bound was specified,
  an omitted array bound is taken to be the same as in that
  earlier declaration, and similarly for the definition
  of a static data member of a class.*

Note the ambiguity in the current specification when an array declarator
with several "array of" specifications are adjacent;
which array bound may be ommitted?

The preferred syntax requires a relaxation of
array type declarator constraints defined in **n4567 8.3.4.p3**
for an incomplete object type.
The following wording change is recommended.

  *When several “array of” specifications are adjacent,
  a multidimensional array type is created.
  In declarations in which an incomplete object type is allowed
  any of the bounds constant expressions may be omitted.
  In some cases in the declaration of a function parameter (8.3.5)
  the first array bound constant expression may be omitted.
  The first array bound constant expression
  may also be omitted when the declarator is
  followed by an initializer (8.5).
  In this case the bound is calculated from the
  number of initial elements (say, N) supplied (8.5.1),
  and the type of the identifier of D is “array of N T”.
  Furthermore, if there is a preceding declaration
  of the entity in the same scope in which the bound was specified,
  the omitted first array bound constant expression is
  taken to be the same as in that
  earlier declaration, and similarly for the definition
  of a static data member of a class.*

**This minor language specification change has been implemented with
a trivial (one line) patch to Clang and was permissible in gcc prior to
version 5.**


A major goal of the **array_ref** interface is to preserve compatibility

